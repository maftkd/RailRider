using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Events;
using SplineMesh;

public class RailGenerator : MonoBehaviour
{
	CubicBezierPath _path;
	List<Vector3> _knots = new List<Vector3>();
	LineRenderer _line;
	public Material _lineMat;
	float _nodeDist = 16f;//approximate segment length
	int _lineResolution = 10;//Number of points on line per segment
	float _moveSpeed=0.4f;//rate at which char moves along rail in segments/sec
	float _targetMoveSpeed=0.4f;
	float _speedChangeLerp=.05f;
	Transform _railTracker;
	float _balance;
	float _t;
	float _balanceSpeed = 100;//degrees per second of rotation at full balanceVelocity
	float _balanceSpeedIncrease = 20;
	int _balanceState = 0;//0=no input, 1=left input, 2=right input
	float _balanceVelocity = 0;//rate at which Character rotates
	float _balanceAcceleration = 6f;//rate at which touch input affects velocity
	Transform _helmet;
	Dictionary<float, Coin> _coins = new Dictionary<float, Coin>();
	public Transform _coin;
	float _coinHeight = 1.5f;
	float _crossThreshold = 0.001f;
	float _coinProbability = 0.15f;
	int _minCoinCluster=3;
	int _maxCoinCluster=12;
	int _tOffset=0;
	int _lookAheadTracks=8;
	public Transform _jumper;
	float _lastJump;
	float _jumpProbability = 0.02f;
	float _maxJumpProbability = .12f;
	float _jumpThreshold=1.5f;//spacing between jumps and other jumps
	float _minJumpThreshold=0.5f;
	float _jumpSpacing=0.6f;//spacing between coins and jumps
	float _minJumpSpacing=0.1f;
	float _lineResFrac;
	Transform _ethan;
	bool _jumping=false;
	float _jumpHeight = 1.85f;
	float _jumpDur = 0.5f;
	float _minJumpY = 1f;//min height to clear a coin
	public AnimationCurve _jumpCurve;
	float _spinSpeed=360f;
	float _inputDelayTimer=0;
	float _inputDelay=.05f;
	Dictionary<float, Jumper> _jumpers = new Dictionary<float, Jumper>();
	[ColorUsageAttribute(false,true)]
	public Color _coinHitColor;
	int _collectedCoins;
	float _coinHitThreshold = .98f;
	int _gameState=0;
	//0 = menu
	//1 = play
	//2 = collided with jumper
	//3 = gate check
	float _nextGate;//The time at which a new gate will be generated
	int _gatePos;//The position of the new gate
	Transform _gate;
	float _minGateSpace=10;
	float _maxGateSpace=25;
	public UnityEvent _jumpHit;//essentially game over event
	Text _scoreText;
	Text _comboText;
	CanvasGroup _scoreCanvas;
	float _maxSpeed=.8f;
	float _speedIncreaseRate = 0.1f;//rate of speed increase 
	float _balanceSpeedMultiplier=280;
	public Text _tDebug,_ngDebug,_gpDebug;
	public GameObject[] _wsText;
	float _scoreChangeTimer;
	int _defaultScoreFont;
	int _boldScoreFont;
	public Text _hsText;
	bool _tutorial;
	public AudioSource _music;
	public GameObject _tutorialObjs;
	Camera _main;
	float _crossMultiplier=-250f;
	float _corkAngle;
	Transform _explosion;
	float _invincibleSpeed=.65f;
	float _invincibleWarning=.05f;
	CanvasGroup _invincDisplay;
	Image _invincMeter;
	public Material _ethanMat;
	public Gradient _invincibilityGrad;
	public AudioSource _takeOff;
	public AudioSource _landing;
	public AudioSource _woosh;
	public AudioSource _smash;
	public AudioSource _gearHit;
	public TrailRenderer _lTrail,_rTrail;
	public Transform _coinFx;
	int _combo;
	float _comboPitche=.5f;
	AudioSource _comboSfx;

	struct Coin {
		public Transform transform;
		public MeshRenderer mesh;
		public Vector3 offset;
	}

	struct Jumper {
		public Transform transform;
		public MeshRenderer mesh;
	}
	
	// Start is called before the first frame update
	void Start()
	{
		//configure line renderer
		if(GetComponent<LineRenderer>()==null)
			_line = gameObject.AddComponent(typeof(LineRenderer)) as LineRenderer;
		else
			_line = GetComponent<LineRenderer>();
		_line.widthMultiplier=0.8f;
		_line.material=_lineMat;
		_lineResFrac=1/(float)_lineResolution;
		
		//configure railTracker
		_railTracker=transform.GetChild(0);

		//generate track starter
		if(PlayerPrefs.HasKey("tut"))
		{
			GenerateStartingSection();
			_tutorial=false;
		}
		else{
			//generate tutorial section
			GenerateTutorialSection();
			_tutorial=true;
		}


		//set speed
		_targetMoveSpeed=_moveSpeed;
		_balanceSpeed = _moveSpeed*_balanceSpeedMultiplier;

		//GenerateJumpers(0,_knots.Count-1);

		//This sets number of coins to 0
		_collectedCoins=0;

		//Get some references
		_helmet = GameObject.FindGameObjectWithTag("Helmet").transform;
		_ethan = _railTracker.GetChild(0); 
		_gate = GameObject.FindGameObjectWithTag("Gate").transform;
		_scoreText = GameObject.FindGameObjectWithTag("Score").GetComponent<Text>();
		_comboText = _scoreText.transform.GetChild(0).GetComponent<Text>();
		_comboSfx = _comboText.transform.GetComponent<AudioSource>();
		_invincDisplay = _scoreText.transform.GetChild(1).GetComponent<CanvasGroup>();
		_invincMeter = _invincDisplay.transform.GetChild(0).GetComponent<Image>();
		_scoreCanvas = _scoreText.transform.GetComponent<CanvasGroup>();
		_defaultScoreFont=_scoreText.fontSize;
		_boldScoreFont=Mathf.FloorToInt(_defaultScoreFont*1.4f);
		if(PlayerPrefs.HasKey("hs")){
			_hsText.text=PlayerPrefs.GetInt("hs").ToString("HIGH SCORE: #");
		}
		_main = Camera.main;
		_explosion = GameObject.FindGameObjectWithTag("Explosion").transform;
		_ethanMat.SetColor("_EmissionColor",Color.black);
	}
	
	//function used in update loop to reset velocity towards 0
	void LimitVelocity(){
		if(_balanceVelocity!=0){
			_balanceVelocity=Mathf.Lerp(_balanceVelocity,0,_balanceAcceleration*Time.deltaTime);
			if(Mathf.Abs(_balanceVelocity)<0.15f)
				_balanceVelocity=0;
		}
	}

	//jump
	IEnumerator JumpRoutine(){
		_jumping=true;
		_takeOff.pitch = Random.Range(.8f,1.4f);
		_takeOff.Play();
		_lTrail.emitting=true;
		_rTrail.emitting=true;
		_balanceVelocity=0;
		_inputDelayTimer=0;
		float timer=0;
		Vector3 startPos = _ethan.localPosition;
		Vector3 endPos = startPos+Vector3.up*_jumpHeight;
		while(timer<_jumpDur){
			timer+=Time.deltaTime;
			_ethan.localPosition = Vector3.LerpUnclamped(startPos,endPos,_jumpCurve.Evaluate(timer/_jumpDur));			
			yield return null;
		}
		_ethan.localPosition=startPos;
		_jumping=false;
		_inputDelayTimer=-_inputDelay*2;

		//snap rotation
		_landing.pitch = Random.Range(1,1.4f);
		_landing.Play();
		Vector3 localE = _ethan.localEulerAngles;
		float yLocal = localE.y;
		yLocal = Mathf.Round(yLocal/90f)*90;
		localE.y=yLocal;
		_ethan.localEulerAngles=localE;
		_lTrail.emitting=false;
		_rTrail.emitting=false;
	}

	void GenerateStartingSection(){
		//we add the previous node just so it looks like there's a stretch
		//of rail from the start menu
		_knots.Add(Vector3.back*_nodeDist);
		_knots.Add(Vector3.zero);
		_t=1f;
		_knots.Add(Vector3.forward*_nodeDist);

		//Starts out with 3 straights total
		AddStraight(2);//was 2 - is 3 to test corkscrews

		//Then a long curve
		AddCurve(_nodeDist*Random.Range(3,5f),3,(Random.value < 0.5f));

		ResetRail();

		//AddStraight(3);//was 2 - is 3 to test corkscrews

		GenerateCoins(3,_knots.Count-1);

		_nextGate = Random.Range(_minGateSpace,_maxGateSpace);//remember this is not the location of the gate but the tOffset at which the gate spawns
		_gatePos=1024;//something arbitrarily high at the start - will be reset in AddGate()
	}

	void GenerateTutorialSection(){
		_knots.Add(Vector3.back*_nodeDist);
		_knots.Add(Vector3.zero);
		_t=1f;
		//_knots.Add(Vector3.forward*_nodeDist);
		AddStraight(2);

		//instance some world space text items
		_tutorialObjs.SetActive(true);

		//add a right curve
		AddCurve(_nodeDist*2f,3,true);
		AddStraight(2);
		//add a left curve
		AddCurve(_nodeDist*2f,3,false);
		//add some straights
		AddStraight(2);

		ResetRail();

		//spawn coins along curves
		GenerateCoins(4,5,1);
		GenerateCoins(8,9,1);
		//Spawn a jumper
		GenerateJumpers(11,12,1);


		_nextGate = Random.Range(_minGateSpace,_maxGateSpace);//remember this is not the location of the gate but the tOffset at which the gate spawns
		_gatePos=1024;//something arbitrarily high at the start - will be reset in AddGate()
	}

	void GenerateCoins(int startKnot, int endKnot,float probOverride=-1){
		//coin generation
		int clusterCounter=0;
		float prevCross=0;
		float prob = probOverride==-1? _coinProbability : probOverride;
		bool cork=false;
		_corkAngle=0;
		float corkInc=0;
		//Debug.Log("generating coins");
		//more temp code for jumper
		for(int i=startKnot*_lineResolution; i<endKnot*_lineResolution; i++){
			//converts line space to coin space
			float t = i/(float)_lineResolution;
			float key = t+_tOffset;

			//calculates the local position and tengent at t along rail
			Vector3 railPos = _path.GetPoint(t);
			Vector3 curForward = _path.GetTangent(t);

			//validate rail index (don't add any past the end)
			if(i<_line.positionCount-1){

				//If there are still coins to be added in a cluster
				if(clusterCounter>0){
					//declare coin struct
					Coin c = new Coin();
					//determine the curvature
					Vector3 nextForward = _path.GetTangent(t+1f/(float)_lineResolution);
					float cross = Vector3.Cross(curForward,nextForward).y*.1f;

					//make sure the delta isn't nuts
					if(Mathf.Abs(cross-prevCross)>0.1f)
					{
						clusterCounter=0;
					}
					else{
						//rail curvature is OK
						//calculate the coins offset direction
						Vector3 right = Vector3.Cross(Vector3.up,curForward);

						Vector3 offset;
						if(!cork){
							offset = Vector3.LerpUnclamped(Vector3.up,right,cross);
						}
						else{
							offset = Vector3.LerpUnclamped(Vector3.up,right,_corkAngle);
						}

						//instance the coin
						Transform curCoin = Instantiate(_coin,railPos+Vector3.up*_coinHeight,Quaternion.identity, null);
						curCoin.LookAt(curCoin.position+curForward);
						//Vector3 coinEulers = curCoin.eulerAngles;
						//coinEulers.y=0;
						//curCoin.eulerAngles=coinEulers;
						if(!cork)
							curCoin.RotateAround(railPos,curForward,cross*_crossMultiplier);
						else
						{
							curCoin.RotateAround(railPos,curForward, _corkAngle*_crossMultiplier);
							if(Random.value<.1f)
								corkInc*=-1f;
							_corkAngle+=corkInc;
						}
						c.offset=curCoin.up;

						curCoin.localScale=new Vector3(1f,2f,.5f);
						c.transform = curCoin;

						//get the coin mesh data
						c.mesh = curCoin.GetComponent<MeshRenderer>();

						//add coin to coin dict
						if(!_coins.ContainsKey(key)){
							_coins.Add(key,c);
						}
						clusterCounter--;
						prevCross=cross;
					}
				}
				//If we are not currently generating a cluster
				else{
					//Debug.Log("Cluster count = 0");
					bool nearJump=false;
					foreach(float k in _jumpers.Keys){
						if(Mathf.Abs(k-key)<_jumpSpacing)
						{
							nearJump=true;
							break;
						}
					}
						
					//see if we randomly create a cluster
					if(!nearJump && Random.value<prob)
					{
						//Debug.Log("Not near jump & rando < 1");
						//Make sure we don't generate coins on straight sections because that is boring and the coins are harder to see
						Vector3 nextForward = _path.GetTangent(t+1f/(float)_lineResolution);
						float cross = Vector3.Cross(curForward,nextForward).y*.1f;
						prevCross=cross;//need this to ensure the cluster doesn't get insta cancelled
						if(Mathf.Abs(cross)>_crossThreshold)
						{
							//Determine cluster size
							clusterCounter=Random.Range(_minCoinCluster,_maxCoinCluster+1);
							cork=false;
						}
						else{
							//gen corkscrew
							clusterCounter=Random.Range(5,25);;
							cork=true;	
							corkInc=Random.Range(-.1f,.1f);
						}
					}
				}
			}
		}
	}

	void GenerateJumpers(int startKnot, int endKnot, float probOverride=-1){
		
		float prob = probOverride == -1 ? _jumpProbability : probOverride;
		for(int i=startKnot*_lineResolution; i<endKnot*_lineResolution; i++){
			//converts line space to coin space
			float t = i/(float)_lineResolution;
			float key = t+_tOffset;

			//calculates the local position and tengent at t along rail
			Vector3 railPos = _path.GetPoint(t);
			Vector3 curForward = _path.GetTangent(t);

			//validate rail index (don't add any past the end)
			if(i<_line.positionCount-1){

				//if jump is far enough from another jump and rng hits, then spawn a jumper
				if(key-_lastJump>_jumpThreshold && Random.value<prob && Mathf.Abs(key-_gatePos)>2f){
					
					_lastJump=key;
					Transform jumper = Instantiate(_jumper,railPos,Quaternion.identity, null);
					jumper.forward=-curForward;

					//add to jumper dict
					Jumper j;
					j.transform = jumper;
					j.mesh = jumper.GetComponent<MeshRenderer>();
					j.mesh.enabled=false;
					_jumpers.Add(key, j);

					//clear out nearby coins
					List<float> removeList = new List<float>();
					foreach(float k in _coins.Keys){
						if(Mathf.Abs(k-key)<_jumpSpacing){
							removeList.Add(k);
						}
					}
					foreach(float k in removeList){
						Transform trans = _coins[k].transform;
						_coins.Remove(k);
						trans.name="destroyed";
						Destroy(trans.gameObject);
					}
				}
			}
		}
	}

	int GenerateNewTrack(){
		float val = Random.value;
		int numTracks = 0;
		//before we do any of this probability stuff
		//is current tOffset past or equal to the gate threshold?
		//if so generate a gate
		if(_t>=_nextGate){
			AddGate();
			return -1;
		}
		if(val<.33f){
			numTracks = Random.Range(1,5);
			//add a straight
			AddStraight(numTracks);
		}
		else if(val<.67f){
			//add a curve
			float trackToRad = Random.Range(1,6f);
			float radius = _nodeDist*trackToRad;
			numTracks = Random.Range(1,Mathf.FloorToInt(3*trackToRad));
			numTracks = Mathf.Min(5,numTracks);
			AddCurve(radius,numTracks,(Random.value<0.5f));
		}
		else{
			//add a zig zag
			numTracks = Random.Range(2,8);
			AddZigZag(Mathf.PI/Random.Range(5f,12f),numTracks,(Random.value<0.5f));
		}
		return numTracks;
	}

	int RemoveOldTrack(float t){
		//remove old tracks
		int removeUntil = Mathf.FloorToInt(t-_tOffset);
		int removedTracks = 0;
		for(int i=removeUntil-3; i>=0; i--)
		{
			_knots.RemoveAt(i);
			removedTracks++;
		}
		return removedTracks;
	}


	void ClearOldCoins(int endClear){

		//Determine which coins need to be removed
		List<float> deleteKeys = new List<float>();
		foreach(float f in _coins.Keys){
			if(f<endClear)
				deleteKeys.Add(f);
			else
				break;
		}
		
		//Destroy coins and remove from dict
		foreach(float f in deleteKeys){
			Transform t = _coins[f].transform;
			Destroy(t.gameObject,Random.value);//stagger the recycling process over a second
			_coins.Remove(f);
		}
	}

	void ClearOldJumpers(int endClear){
		List<float> deleteKeys = new List<float>();
		foreach(float f in _jumpers.Keys){
			if(f<endClear)
				deleteKeys.Add(f);
			else
				break;
		}
		foreach(float f in deleteKeys){
			Transform t = _jumpers[f].transform;
			Destroy(t.gameObject, Random.value);
			_jumpers.Remove(f);
		}
	}

	void ResetRail(){
		//instantiate our cubic bezier path
		_path = new CubicBezierPath(_knots.ToArray());	
		
		//Rail (line renderer) setup
		_line.positionCount=_lineResolution*(_path.GetNumCurveSegments());
		for(int i=0; i<_line.positionCount; i++){
			//set the rail position at point t along rail
			float t = i/(float)_lineResolution;
			Vector3 railPos = _path.GetPoint(t);
			Vector3 curForward = _path.GetTangent(t);
			_line.SetPosition(i,railPos);
		}
	}

	void AddGate(){
		AddStraight(3,false);
		_gatePos = _knots.Count-3+_tOffset;
		_nextGate=_gatePos+Random.Range(_minGateSpace,_maxGateSpace);
		Vector3 railLine = _knots[_knots.Count-2]-_knots[_knots.Count-3];
		railLine.Normalize();
		_gate.position = _knots[_knots.Count-3];//+railLine*_nodeDist*1.25f;
		//_gate.position+=Vector3.up;
		_gate.up=railLine;
		Vector3 localEulers = _gate.localEulerAngles;
		localEulers.x=90f;
		_gate.localEulerAngles = localEulers;
		//_gate.localScale = new Vector3(5,5,_nodeDist);
		_gate.GetComponent<MeshRenderer>().enabled=true;
	}


	void AddStraight(int segments, bool allowCorks=true){
		Vector3 tan = _knots[_knots.Count-1]-_knots[_knots.Count-2];
		tan.Normalize();
		for(int i=0; i<segments; i++){
			_knots.Add(_knots[_knots.Count-1]+tan*_nodeDist);
		}
		/*
		if(allowCorks && segments>2){
			ResetRail();
			//add corkscrew coins
			float corkScrewStart = (float)(_knots.Count-1-(segments-1)+_tOffset);
			float corkScrewEnd = corkScrewStart+(segments-2);//minus 2 for s and e
			AddCorkscrewCoins(corkScrewStart,corkScrewEnd);
		}
		*/
	}

	void AddCorkscrewCoins(float tStart, float tEnd){
		Debug.Log("Adding corkscrew coins between "+tStart+" and "+tEnd);
		float inc = 1f/(float)_lineResolution;
		float angle=0;
		int endLoop = 10*(Mathf.RoundToInt(tEnd-tStart));
		for(int i=0; i<endLoop; i++){
			float key = tStart+inc*i;
			Debug.Log("key: "+key);
			Coin c = new Coin();
			Vector3 forward = _path.GetTangent(key);
			Vector3 railPos = _path.GetPoint(key);
			Vector3 right = Vector3.Cross(Vector3.up,forward);
			Vector3 offset = Vector3.LerpUnclamped(Vector3.up,right,angle);
			offset.Normalize();
			c.offset=offset;
			Transform curCoin = Instantiate(_coin,railPos+offset*_coinHeight,Quaternion.identity,null);
			curCoin.LookAt(railPos);
			//curCoin.RotateAround(curCoin.position,offset,90f);
			curCoin.localScale = new Vector3(.5f,1f,2f);
			c.transform=curCoin;
			c.mesh = curCoin.GetComponent<MeshRenderer>();

			//add coin to coin dict
			if(!_coins.ContainsKey(key)){
				_coins.Add(key,c);
			}
			angle+=inc;
		}

	}


	void AddZigZag(float angle, int zigzags, bool leftFirst){
		Vector3 tan = _knots[_knots.Count-1]-_knots[_knots.Count-2];
		float ang = Mathf.Atan2(tan.z,tan.x);
		int start= leftFirst ? 0 : 1;
		for(int i=start; i<zigzags; i++){
			float curAngle = i%2==0 ? ang+angle : ang-angle;
			_knots.Add(_knots[_knots.Count-1]+new Vector3(_nodeDist*Mathf.Cos(curAngle),0,_nodeDist*Mathf.Sin(curAngle)));
		}
	}


	void AddCurve(float radius, int sectors, bool toRight){

		//calculate the angle for each section
		float c = Mathf.PI*2*radius;
		float secFrac = _nodeDist/c;
		float secAngle = secFrac*Mathf.PI*2;
		secAngle = toRight ? secAngle*-1f : secAngle;

		//calculate the circle's center
		Vector3 turnCenter = _knots[_knots.Count-1];
		Vector3 tan = turnCenter-_knots[_knots.Count-2];
		tan.Normalize();
		Vector3 right = Vector3.Cross(Vector3.up,tan);
		right = toRight? right : right*-1f;
		float angleOffset = Mathf.Atan2(-right.z,-right.x);
		turnCenter+=right*radius;
		//_turnCenters.Add(turnCenter); //this is for debugging (remove before ship)

		//Add knots
		for(int i=1; i<=sectors; i++){
			Vector3 pos;
			float ang = angleOffset+secAngle*i;
			pos = new Vector3(turnCenter.x+Mathf.Cos(ang)*radius,0,turnCenter.z+Mathf.Sin(ang)*radius);
			_knots.Add(pos);
		}
	}

	void AddCoin(int setValue=-1){
		if(setValue==-1)
		{
			_collectedCoins++;
			_combo++;
			Transform coinSfx = Instantiate(_coinFx);
			AudioSource coinAudio = coinSfx.GetComponent<AudioSource>();
			_comboPitch = Mathf.Lerp(_comboPitch,1.5f,.1f);
			coinAudio.pitch=_comboPitch;
			coinAudio.Play();
			Destroy(coinSfx.gameObject,.2f);
			_comboText.text=_combo.ToString("+#");
		}
		else
		{
			_collectedCoins=setValue;
			_comboText.text="";
			if(_combo>3)
				_comboSfx.Play();
			_combo=0;
			_comboPitch=.5f;
		}
		_scoreText.text=_collectedCoins.ToString();
		_scoreText.fontSize=_boldScoreFont;
		_scoreChangeTimer=.4f;
	}

	public void StartRiding(){
		_gameState=1;
		if(!_tutorial)
		{
			StartCoroutine(FadeInScoreText());
		}
	}

	public void PlayTutorial(){
		_gameState=1;
		_tutorial=true;
		_coins.Clear();
		_jumpers.Clear();
		_knots.Clear();
		GenerateTutorialSection();
	}


	// Update is called once per frame
	void Update()
	{
		switch(_gameState){
			case 0://menu
				break;
			case 1://gameplay
				//multi-touch input loop
				_balanceState=0;
				foreach(Touch touch in Input.touches){
					Vector2 touchPos = touch.position;
					if(touchPos.x < Screen.width*0.4f){
						_balanceState+=1;
					}
					else if(touchPos.x > Screen.width*0.6f){
						_balanceState+=2;
					}
				}	
	#if UNITY_EDITOR
				float keyInput = Input.GetAxis("Horizontal");
				if(keyInput<0)
					_balanceState=1;
				else if(keyInput>0)
					_balanceState=2;
				else
					_balanceState=0;
	#endif
				//reset input delay
				if(_balanceState==0)
					_inputDelayTimer=0;

				//temp code for testing speed increase
				if(Input.GetKeyUp(KeyCode.Space)){
					_moveSpeed += 0.1f;
					_balanceSpeed += _balanceSpeedIncrease;
				}
				//temp code for testing jump
				if(Input.GetKey(KeyCode.UpArrow)){
					if(!_jumping)
						StartCoroutine(JumpRoutine());
				}

				//handle balance logic
				switch(_balanceState){
					case 0:
						//fall to 0
						LimitVelocity();
						break;
					case 1:
						//climb to 1
						if(!_jumping)
						{
							_balanceVelocity=Mathf.Lerp(_balanceVelocity,1f,_balanceAcceleration*Time.deltaTime);
						}
						//temp code for air spins
						else
							_ethan.Rotate(0,-_spinSpeed*Time.deltaTime, 0);
						break;
					case 2:
						//climb to -1
						if(!_jumping)
							_balanceVelocity = Mathf.Lerp(_balanceVelocity,-1f,_balanceAcceleration*Time.deltaTime);

						//temp code for air spins
						else
							_ethan.Rotate(0,_spinSpeed*Time.deltaTime, 0);
						break;
					case 3:
						//jump
						if(!_jumping)
							StartCoroutine(JumpRoutine());
						//and fall to 0
						LimitVelocity();
						break;
				}

				//set player's root position and orientation
				_balance-=_balanceVelocity*Time.deltaTime*_balanceSpeed;
				Vector3 prevForward = _railTracker.forward;
				SetPosition();

				//Check for point acquisitions
				foreach(float f in _coins.Keys){
					if(f>_t-1 && f <_t+4){
						Coin c = _coins[f];

						//disable coins
						if(f<_t-.5f)
							c.mesh.enabled=false;

						//enable coins
						else
						{
							c.mesh.enabled=true;

							//coinDetection
							if(Mathf.Abs(f-_t)<.05f && c.transform.tag!="Collected"){
								float dot =Vector3.Dot(c.offset,_railTracker.up); 
								if(dot>_coinHitThreshold)
								{
									c.mesh.material.SetColor("_Color",_coinHitColor);
									c.transform.tag="Collected";
									AddCoin();
								}
							}
							else if(_t-f>.05f && c.transform.tag!="Collected"){
								if(_combo>0){
								_collectedCoins+=_combo;
								AddCoin(_collectedCoins);
								c.transform.tag="Collected";
								}
							}
						}
					}
				}

				//check for jumper collisions
				foreach(float f in _jumpers.Keys){
					if(f>_t-1 && f<_t+4){
						//only process jumpers that haven't been 'collected' or 'destroyed'
						bool notCol = _jumpers[f].transform.tag!="Collected";
						if(notCol)
						{
							_jumpers[f].mesh.enabled=true;
							
							if(Mathf.Abs(f-_t)<.02f && _ethan.localPosition.y < _minJumpY){
								if(!_tutorial){
									if(_moveSpeed>_invincibleSpeed){
										//destroy the gear
										//play particle
										Transform vfx = _jumpers[f].transform.GetChild(0);
										vfx.GetComponent<ParticleSystem>().Play();
										_jumpers[f].transform.tag="Collected";
										_jumpers[f].mesh.enabled=false;
										_smash.Play();
									}
									else{
										_gameState=2;
										_jumpHit.Invoke();
										if(!PlayerPrefs.HasKey("hs"))
											PlayerPrefs.SetInt("hs",_collectedCoins);
										else{
											if(PlayerPrefs.GetInt("hs")<_collectedCoins){
												PlayerPrefs.DeleteKey("hs");
												PlayerPrefs.SetInt("hs",_collectedCoins);
											}
										}
										PlayerPrefs.Save();
										_explosion.position = _ethan.position;
										_explosion.GetComponent<ParticleSystem>().Play();
									}
								}
								else{
									_gameState=2;
									_gearHit.Play();
									StartCoroutine(Rewind());
									return;
								}
							}
						}
					}
				}

				//check for gate
				if(_t>=_gatePos)
				{
					//_gameState=3;
					//StartCoroutine(GateRoutine());
					GateEvent();
				}

				//check for new track gen if only X tracks lie ahead
				if(_t-_tOffset>_knots.Count-_lookAheadTracks){

					int numTracks = GenerateNewTrack();

					int removed = RemoveOldTrack(_t);

					ClearOldCoins(_tOffset+removed);
					ClearOldJumpers(_tOffset+removed);

					ResetRail();

					_tOffset+=removed;
					
					//set this to -1 for special cases where coins are generated along with the track
					if(numTracks!=-1)
						GenerateCoins(_knots.Count-(numTracks+1),_knots.Count-1);
					GenerateJumpers(_knots.Count-(numTracks+1),_knots.Count-1);
				}
				_moveSpeed = Mathf.Lerp(_moveSpeed,_targetMoveSpeed,_speedChangeLerp*Time.deltaTime);
				_balanceSpeed = _moveSpeed*_balanceSpeedMultiplier;
				_t+=Time.deltaTime*_moveSpeed;
				if(_tutorial && _t > 13){
					_tutorialObjs.SetActive(false);
					_tutorial=false;
					PlayerPrefs.SetInt("tut",1);
					PlayerPrefs.Save();
					_collectedCoins=0;
					AddCoin(0);
					StartCoroutine(FadeInScoreText(0));
				}
				if(_moveSpeed>_invincibleSpeed){
					//invincinbility effect
					Color color;
					if(_moveSpeed>_invincibleSpeed+_invincibleWarning){
						color = _invincibilityGrad.Evaluate(Mathf.PingPong(_t,1f));
					}
					else{
						color = Color.white*Mathf.PingPong(_t,0.2f)*5f;
					}
					_ethanMat.SetColor("_EmissionColor",color);
					_invincMeter.fillAmount=Mathf.InverseLerp(_invincibleSpeed,_maxSpeed,_moveSpeed);
				}
				else
				{
					_ethanMat.SetColor("_EmissionColor",Color.black);
					_invincDisplay.alpha=0;
				}
				break;
			case 2://collide with jumper
				break;
			case 3://gate check
				break;
		}
		if(_scoreChangeTimer>0){
			_scoreChangeTimer-=Time.deltaTime;
			if(_scoreChangeTimer<=0)
				_scoreText.fontSize=_defaultScoreFont;
		}
		//_tDebug.text="speed: "+_moveSpeed.ToString("#.##");
		//_ngDebug.text="NG: "+_nextGate.ToString("#.#");
		//_gpDebug.text="GP: "+_gatePos.ToString("#.#");
#if UNITY_EDITOR
		if(Input.GetKeyDown(KeyCode.T))
			PlayerPrefs.DeleteKey("tut");
#endif
	}

	void SetPosition(){
		float railT = _t-_tOffset;
		_railTracker.position = _path.GetPoint(railT);
		_railTracker.forward = _path.GetTangent(railT);
		Vector3 localEuler = _railTracker.localEulerAngles;

		//physics
		//float grav = Mathf.Abs(_balance);
		//grav = grav<_gravityThreshold ? 0 : Mathf.InverseLerp(0,90,grav)*Mathf.Sign(balance)*_gravityPower;
		//float momentum = Vector3.Cross(prevForward, _railTracker.forward).y*_momentumPower;
		//balance+=grav;
		//balance-=momentum;
		localEuler.z = -_balance;
		_railTracker.localEulerAngles=localEuler;
	}

	void GateEvent(){
		//tighten up jumps
		_jumpSpacing = Mathf.Lerp(_jumpSpacing,_minJumpSpacing,_speedIncreaseRate);
		_jumpThreshold = Mathf.Lerp(_jumpThreshold,_minJumpThreshold,_speedIncreaseRate);	
		_jumpProbability = Mathf.Lerp(_jumpProbability,_maxJumpProbability,_speedIncreaseRate);

		//determine next gate position
		_gatePos=Mathf.FloorToInt(_nextGate)+50;//this will get reset when the next gate is generated

		//speed boost
		_moveSpeed=_maxSpeed;

		_woosh.Play();

		_invincDisplay.alpha=1f;
		_invincMeter.fillAmount=1f;

		//particles
		/*
		foreach(ParticleSystem ps in _speedParts){
			ps.Play();
		}
		*/
	}

	IEnumerator FadeInScoreText(float delay=4f){
		yield return new WaitForSeconds(delay);
		float timer=0;
		while(timer<1){
			timer+=Time.deltaTime;
			_scoreCanvas.alpha=timer;
			yield return null;
		}
		_scoreCanvas.alpha=1f;
		//destroy world space text
		for(int i=_wsText.Length-1; i>=0; i--){
			Destroy(_wsText[i]);
		}
	}

	IEnumerator Rewind(){
		float timer=0;
		_music.pitch=2;
		while(timer<1){
			timer+=Time.deltaTime;
			_t-=Time.deltaTime;
			SetPosition();
			yield return null;
		}
		_music.pitch=1;
		_gameState=1;
	}

	void OnDrawGizmos(){
	}
}
